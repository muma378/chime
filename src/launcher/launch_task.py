      
try:
    from mesos.interface import mesos_pb2
except ImportError:
    import mesos_pb2

from settings import CHIME_EXECUTOR_ID, CHIME_EXECUTOR_COMMAND
import settings

class TaskBuilder(object):
	"""launches tasks generated by offerProcessor"""
	def __init__(self):
		super(TaskLauncher, self).__init__()
		
	def launch(self):
		pass        

    def build(self):
    	task_info = mesos_pb2.TaskInfo()
    	# TODO: name conventionlly, eg. task_name + time.zfill(2) + task_sub_id.zfill(4)
    	task_info.task_id.value = "crawl-02-0003"
    	task_info.slave_id.value = offer.slave_id.value
    	
    	executor_info = mesos_pb2.ExecutorInfo()
        executor_info.executor_id.value = CHIME_EXECUTOR_ID
        executor_info.command.value = CHIME_EXECUTOR_COMMAND
        command_uris = executor_info.command.uris.add()
        command_uris.value = "hdfs://master1:9000/username/script.tar.gz"
        command_uris.extract = True

        # TODO: name after yaml, eg. project_name + task_type
        task_info.name = "9khr-segment"
        task_info.executor.MergeFrom(executor_info)
        task_info.data = "hdfs://master1:9000/project-name/folder1~20"

        cpus = task.resources.add()
        cpus.name = settings.CHIME_RESOURCE_CPUS
        cpus.type = mesos_pb2.Value.SCALAR
        cpus.scalar.value = settings.CHIME_RESOURCE_CPUS_USAGE

        
        return task_info

    def __init__(self, task):
        self.task = task
        self.task_index = 0

        if os.path.exists(settings.CHIME_TASK_PATH.format(username=task["user"]), taskname=task["name"])
            pass
        with open()
        self.task_count = 

    def build(self, offer):
        task_info = mesos_pb2.TaskInfo()

        task_info.task_id.value = self.task.get("name", settings.CHIME_TASK_COMMON_NAME) + 
        task_info.slave_id.value = offer.slave_id.value

        executor_info = mesos_pb2.ExecutorInfo()
        executor_info.executor_id.value = settings.CHIME_EXECUTOR_ID
        executor_info.command.value = settings.CHIME_EXECUTOR_COMMAND

        command_uris = executor_info.command.uris.add()
        command_uris.value = self.task.get("uris", )
        command_uris.extract = True
